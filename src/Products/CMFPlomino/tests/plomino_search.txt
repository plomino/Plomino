Set up login account

    >>> portal = layer['portal']
    >>> memberName = 'siteManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member', 'Manager',),
    ...         '',
    ...         {'fullname': 'Site Manager', 'email': memberName+'@dummy.fr',}
    ...         )
    >>> memberName = 'userManager'
    >>> portal.portal_membership.addMember(
    ...         memberName,
    ...         memberName,
    ...         ('Member',),
    ...         '',
    ...         {'fullname': 'Site Member', 'email': memberName+'@dummy.fr',}
    ...         )

Create plomino database and publish it::

    >>> db = portal.mydb
    >>> temp_storage = getattr(db,'temporary_files',None)
    >>> wf_tool = portal.portal_workflow
    >>> wf_tool.doActionFor(db, 'publish')
    >>> db.manage_setLocalRoles('userManager', ['PlominoManager'])

Create the browser object we'll be using::

    >>> browser = Browser(layer['app'])
    >>> browser.handleErrors = False
    >>> transaction.commit()  # enable the browser to see our changes

Open portal::

    >>> portal_url = portal.absolute_url()
    >>> browser.open(portal_url)

Log in with ``Site Manager`` access rights::

    >>> browser.getLink('Log in').click()
    >>> browser.getControl('Login Name').value = 'siteManager'
    >>> browser.getControl('Password').value = 'siteManager'
    >>> browser.getControl('Log in').click()

=============
Search Form
=============

Createa search form and view with some data

    >>> id = db.invokeFactory('PlominoForm', id='frm3', title='Form 3')
    >>> db.frm3.isSearchForm = True
    >>> db.frm3.search_record_per_page = 5
    >>> db.frm3.search_view = 'search_view'
    >>> id = db.frm3.invokeFactory('PlominoField', id='field1',
    ...         title='Field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.frm3.form_layout = """<p><label for="field1">Field1</label><span class="plominoFieldClass">field1</span></p>"""
    >>> id = db.invokeFactory('PlominoView', id='search_view',
    ...         title='View 1')
    >>> id = db.search_view.invokeFactory('PlominoColumn', id='col1',
    ...         title='Col 1', displayed_field = 'frm3/field1')

    >>> doc1 = db.createDocument()
    >>> doc1.setItem('field1','val1')
    >>> doc1.setItem('Form','frm3')
    >>> doc1.save()
    >>> doc2 = db.createDocument()
    >>> doc2.setItem('field1','val2')
    >>> doc2.setItem('Form','frm3')
    >>> doc2.save()
    >>> doc3 = db.createDocument()
    >>> doc3.setItem('field1','val3')
    >>> doc3.setItem('Form','frm3')
    >>> doc3.save()
    >>> doc4 = db.createDocument()
    >>> doc4.setItem('field1','val4')
    >>> doc4.setItem('Form','frm3')
    >>> doc4.save()
    >>> doc5 = db.createDocument()
    >>> doc5.setItem('field1','val5')
    >>> doc5.setItem('Form','frm3')
    >>> doc5.save()

    >>> transaction.commit()  # enable the browser to see our changes


Make a GET request, expected all document found
    >>> form_url = portal_url +'/mydb' +'/frm3'
    >>> browser.open(form_url)
    >>> 'val1' in browser.contents
    True
    >>> 'val2' in browser.contents
    True

Now fill in search criteria for field1 and search again
    >>> browser.getControl('Field1').value = 'val2'
    >>> browser.getControl(name='plomino_search').click()
    >>> 'val1' in browser.contents
    False
    >>> 'val2' in browser.contents
    True


Previously entered searchs are kept
    >>> browser.getControl('Field1').value
    'val2'


You can also submit by pushing enter
    >>> browser.getForm(name='frm3').submit()
    >>> browser.getLink('val1')
    Traceback (most recent call last):
    ...
    LinkNotFoundError
    >>> browser.getLink('val2')
    <Link text='val2'...>


Open documents
==============

    >>> browser.getLink('val2').click()
    >>> 'Field1' in browser.contents
    True
    >>> 'val2' in browser.contents
    True
    >>> browser.getControl(name="plomino_edit")
    <Control name='plomino_edit' type='button'>
    >>> browser.getControl(name="plomino_close")
    <Control name='plomino_close' type='button'>
    >>> print browser.url
    http://nohost/plone/mydb/frm3/document/...

Close button should use browser back

    >>> print browser.getControl(name="plomino_close").mech_control.attrs['onclick']
    history.go(-1)

When we close we will go back to the search form again

    #TODO requires JS


Paging
======

Searh form display infor message 'No record found' if search result is empty
    >>> form_url = '%s/mydb/frm3?field1=aaa' % portal_url
    >>> browser.open(form_url)
    >>> browser.getControl('Field1').value = 'aaa'
    >>> browser.getControl(name='plomino_search').click()
    >>> 'Sorry no search results match your query' in browser.contents
    True


Search forms are paged and can be controlled with "limit" param. Lets see 2 pages of 1 item each

    >>> form_url = '%s/mydb/frm3?limit=1' % portal_url
    >>> browser.open(form_url)
    >>> 'val1' in browser.contents
    True
    >>> 'val2' in browser.contents
    False
    >>> 'Document(s) <span>1</span> to <span>1</span> of <span>5</span>' in browser.contents
    True

    >>> browser.getLink('Next >>').click()

    >>> 'val1' in browser.contents
    False
    >>> 'val2' in browser.contents
    True
    >>> 'Document(s) <span>2</span> to <span>2</span> of <span>5</span>' in browser.contents
    True

    >>> browser.getLink('<< Previous').click()
    >>> 'val1' in browser.contents
    True
    >>> 'val2' in browser.contents
    False
    >>> 'Document(s) <span>1</span> to <span>1</span> of <span>5</span>' in browser.contents
    True

    Search page display 5 items

    >>> form_url = '%s/mydb/frm3' % portal_url
    >>> browser.open(form_url)
    >>> 'Document(s) <span>1</span> to <span>5</span> of <span>5</span>' in browser.contents
    True

Free Text Search
================

    >>> frm = getattr(db, db.invokeFactory('PlominoForm', id='textsearch', title='Form 3'))
    >>> frm.isSearchForm = True
    >>> frm.search_view = 'search_view'

    >>> _ = frm.invokeFactory('PlominoField', id='Plomino_SearchableText',
    ...         title='Query',
    ...         mandatory=False,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> frm.form_layout = """<p><label for="Plomino_SearchableText">Query</label><span class="plominoFieldClass">Plomino_SearchableText</span></p>"""

    >>> transaction.commit()  # enable the browser to see our changes


If we are using free text search then the default is see all results

#TODO need to change this default to show empty results?

    >>> browser.open("%s/%s/%s" %(portal_url,db.id,frm.id))
    >>> 'val1' in browser.contents
    True
    >>> 'val2' in browser.contents
    True

Free text searchs all values

    >>> browser.getControl('Query').value = 'val2'
    >>> browser.getControl(name='plomino_search').click()
    >>> 'val1' in browser.contents
    False
    >>> 'val2' in browser.contents
    True

Select search field
===================

    >>> frm = getattr(db, db.invokeFactory('PlominoForm', id='selsearch', title='Form 3'))
    >>> frm.isSearchForm = True
    >>> frm.search_view = 'search_view'

    >>> _ = frm.invokeFactory('PlominoField', id='field1',
    ...         title='myselection',
    ...         mandatory=False,
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE",
    ...         selectionlist=['val1','val2'])
    >>> frm.form_layout = """<p><label for="field1">myselection</label><span class="plominoFieldClass">field1</span></p>"""

    >>> transaction.commit()  # enable the browser to see our changes

Default is we see all documents

    >>> browser.open("%s/%s/%s" %(portal_url,db.id,frm.id))
    >>> 'val1' in browser.contents and 'val2' in browser.contents
    True

We are now using a select to search for text values

    >>> browser.getControl('myselection')
    <ListControl name='field1' type='select'>

    >>> browser.getControl('myselection').value = ['val1']
    >>> browser.getControl(name='plomino_search').click() # search with single value
    >>> browser.getLink('val1')
    <Link text='val1'...>
    >>> browser.getLink('val2')
    Traceback (most recent call last):
    ...
    LinkNotFoundError
    >>> 'Document(s) <span>1</span> to <span>1</span> of <span>1</span>' in browser.contents
    True

Make it multiselect

    >>> frm.field1.widget = 'MULTISELECT'
    >>> transaction.commit()  # enable the browser to see our changes
    >>> browser.open("%s/%s/%s" %(portal_url,db.id,frm.id))

    >>> browser.getControl('myselection').multiple
    True

    >>> browser.getControl('myselection').value = ['val1','val2']
    >>> browser.getControl(name='plomino_search').click() # search with multiple values
    >>> browser.getLink('val1')
    <Link text='val1'...>
    >>> browser.getLink('val2')
    <Link text='val2'...>

    >>> browser.getControl('myselection').value = ['val1']
    >>> browser.getControl(name='plomino_search').click() # search with multiple values
    >>> browser.getLink('val1')
    <Link text='val1'...>
    >>> browser.getLink('val2')
    Traceback (most recent call last):
    ...
    LinkNotFoundError


Do not load search data on initial display

    >>> db.frm3.no_load_initial_search_data = True
    >>> transaction.commit()

Make a GET request, expected no document found
    >>> form_url = portal_url +'/mydb' +'/frm3'
    >>> browser.open(form_url)
    >>> 'val1' not in browser.contents
    True
    >>> 'val2' not in browser.contents
    True

