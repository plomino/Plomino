Plomino import/export tests
=========================


Create sample Plomino database with form, fields, view and formula
------------------------------------------------------------------

    >>> portal = layer['portal']
    >>> db = portal.mydb
    >>> id = db.invokeFactory('PlominoForm', id='frm1', title='Form 1')
    >>> id = db.invokeFactory('PlominoForm', id='frm2', title='Form 2')
    >>> id = db.invokeFactory('PlominoForm', id='frm3', title='Search Form')
    >>> id = db.invokeFactory('PlominoForm', id='frm4', title='Form Visual')
    >>> id = db.invokeFactory('PlominoView', id='view1',
    ...         title='View 1')
    >>> id = db.view1.invokeFactory('PlominoColumn', id='col1',
    ...         title='Col 1', formula='plominoDocument.field1')
    >>> db.view1.sort_column = 'col1'
    >>> id = db.invokeFactory('PlominoView', id='view2',
    ...         title='View 2',
    ...         selection_formula="plominoDocument.field1=='bonjour'")
    >>> id = db.invokeFactory('PlominoView', id='view3',
    ...         title='View 3',
    ...         selection_formula="False")
    >>> id = db.invokeFactory('PlominoView', id='view4',
    ...         title='View 4',
    ...         selection_formula="True")
    >>> id = db.frm1.invokeFactory('PlominoField', id='field1',
    ...         title='Title for field1',
    ...         mandatory=True,
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> db.frm1.form_layout = """1 <p>please enter a value for field1:
    ... <span class="plominoFieldClass">field1</span></p>"""
    >>> id = db.frm1.invokeFactory('PlominoField',
    ...         id='field2',
    ...         title='Title for field2',
    ...         field_type="TEXT",
    ...         field_mode="COMPUTED",
    ...         formula="plominoDocument.setItem('field4', 'side-effect')\nreturn 'My favorite song is '+plominoDocument.field1")
    >>> id = db.frm1.invokeFactory('PlominoField',
    ...         id='field3',
    ...         title='Title for field3',
    ...         field_type="TEXT",
    ...         field_mode="DISPLAY",
    ...         formula="return plominoDocument.field1.upper()")
    >>> id = db.frm1.invokeFactory('PlominoField',
    ...         id='field4',
    ...         title='Title for field4',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE",
    ...         formula="")
    >>> db.frm1.form_layout = """2 <p>please enter a value for field1:
    ... <span class="plominoLabelClass">field1</span>
    ... <span class="plominoFieldClass">field1</span></p><p>Comment:
    ... <span class="plominoLabelClass">field2</span>
    ... <span class="plominoFieldClass">field2</span></p><p>
    ... <span class="plominoFieldClass">field3</span></p><p>
    ... <span class="plominoFieldClass">field4</span></p>"""

Text field:

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='guitarist',
    ...         title='Title for guitarist',
    ...         field_type="TEXT",
    ...         field_mode="EDITABLE")
    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='bassist',
    ...         title='Title for bassist',
    ...         mandatory=True,
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE")
    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='drummer',
    ...         title='Title for drummer',
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE")
    >>> db.frm2.form_layout = """3 <p>Who is the guitarist:
    ... <span class="plominoLabelClass">guitarist</span></p>
    ... <span class="plominoFieldClass">guitarist</span></p>
    ... <span class="plominoLabelClass">bassist: Label for bassist</span></p>
    ... <span class="plominoFieldClass">bassist</span></p>
    ... <span class="plominoLabelClass">drummer</span></p>
    ... <span class="plominoFieldClass">drummer</span></p>
    ... """
    >>> db.frm2.bassist.widget = "CHECKBOX"
    >>> db.frm2.bassist.selectionlist = [u"John Paul Jones", u"Chris Chameleon"]
    >>> db.frm2.drummer.widget = "RADIO"
    >>> db.frm2.drummer.selectionlist = [u"John Bonham", u"Princess Leonie"]
    >>> db.frm2.guitarist.html_attributes_formula = """'placeholder="Enter the name here"'"""

Selection field::

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='artistsfield',
    ...         title='artistsfield',
    ...         field_type="SELECTION",
    ...         field_mode="EDITABLE")
    >>> db.frm2.artistsfield.selectionlist = [u'The Beatles', u'The Doors', u'The Pixies']
    >>> db.frm2.artistsfield.widget="SELECT"
    >>> db.frm2.form_layout = """4 <p>choose:<span class="plominoFieldClass">artistsfield</span></p>"""
    >>> db.frm2.artistsfield.widget = "CHECKBOX"

Date/Time field::

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='lastalbum',
    ...         title='lastalbum',
    ...         field_type="DATETIME",
    ...         field_mode="EDITABLE")
    >>> db.frm2.form_layout = """5 <p>last album release date:
    ... <span class="plominoFieldClass">lastalbum</span></p>"""

Number field::

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='price',
    ...         title='price',
    ...         field_type="NUMBER",
    ...         field_mode="EDITABLE")
    >>> db.frm2.form_layout = """6 <p>Price:<span class="plominoFieldClass">price</span></p>"""
    >>> db.frm2.price.number_type = u'INTEGER'

Rich-text field::

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='comments',
    ...         title='Comments',
    ...         field_type="RICHTEXT",
    ...         field_mode="EDITABLE")
    >>> db.frm2.form_layout = """7 <p>My comments:
    ...  <span class="plominoFieldClass">comments</span></p>"""

Name field:
    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='buyer',
    ...         title='buyer',
    ...         field_type="NAME",
    ...         field_mode="EDITABLE")
    >>> db.frm2.buyer.type = u'MULTI'
    >>> db.frm2.form_layout = """9 <p>Who: <span class="plominoFieldClass">buyer</span></p>"""

A field can be computed::

    >>> id = db.frm2.invokeFactory('PlominoField',
    ...         id='welcome',
    ...         title='Welcome message',
    ...         field_type="TEXT",
    ...         field_mode="COMPUTED")
    >>> db.frm2.welcome.formula = """message="Welcome "+plominoDocument.buyer\nreturn message"""
    >>> db.frm2.form_layout = """11 <p><span class="plominoFieldClass">welcome</span></p>"""

A field can contains helpers
    >>> range = {"more_field_value":1,
    ...    "more_field_name":"field1",
    ...    "less_field_name":"field1",
    ...    "and_or":"or",
    ...    "less_field_value":10,
    ...    "Form":"macro_condition_number_range_in",
    ...    "_macro_id_":"macro_condition_number_range_in_2"}
    >>> invalid = {"invalid_message":"Not in range",
    ...    "Form":"macro_field_validate_invalid",
    ...    "_macro_id_":"macro_field_validate_invalid_2"}
    >>> db.frm2.welcome.helpers = [[range,invalid]]




# Import design from XML::

#     >>> import os
#     >>> dir, _f = os.path.split(os.path.abspath(__file__))
#     >>> f1 = open(os.path.join(dir, "filestoimport", "devplomino.xml"))
#     >>> xmlstring = f1.read()
#     >>> db.importDesignFromXML(xmlstring)
#     >>> db.refreshDB()
#     [...]
#     >>> f1.close()

# Check whether forms and views are imported::

#     >>> db.frmBillet == portal.test.getForm('frmBillet')
#     True
#     >>> db.allArticle == portal.test.getView('allArticle')
#     True

# Import CSV file (API)::

#     >>> fileToImport = open(
#     ...         os.path.join(dir, "filestoimport", "allArticle.csv"))
#     >>> db.processImportAPI(
#     ...         formName="frmBillet",
#     ...         separator = "\t",
#     ...         fileToImport=fileToImport)
#     >>> fileToImport.close()

# Check the documents imported::

#     >>> allDocuments = db.allArticle.getAllDocuments()
#     >>> test = [d.editDate.year() for d in allDocuments]
#     >>> test.sort()
#     >>> test
#     [2008, 2009]
#     >>> test = [d.articleTitle for d in allDocuments]
#     >>> test.sort()
#     >>> test
#     [u'test1', u'test2']

# Databases marked as template can also be exported to a GenericSetup profile::

#     >>> db.setIsDatabaseTemplate(True)
#     >>> from Products.GenericSetup.tests.common import DummyExportContext
#     >>> from Products.CMFPlomino.setuphandlers import export_database_templates
#     >>> context = DummyExportContext(portal)
#     >>> export_database_templates(context)
#     >>> context._wrote[0][0]
#     'plomino/test/frmBillet.xml'



# Import/export design
# ---------------------


     >>> print db.exportDesignAsJSON(elementids=['frm2'])
     {
        "design": {
                "dbsettings": {
     ...
     >>> db.frm2.welcome.formula
     'message="Welcome "+plominoDocument.buyer\nreturn message'

    >>> db.objectIds()
    ['plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'frm_test', 'frm1', 'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']
    >>> s = db.exportDesignAsJSON(elementids=['frm2'])
    >>> s = s.replace("Welcome", "No XML welcome here!")
    >>> db.importDesignFromJSON(s)
    >>> db.frm2.welcome.formula
    u'message="No XML welcome here! "+plominoDocument.buyer\nreturn message'
    >>> db.frm2.welcome.helpers
    [[OrderedDict([(u'more_field_value', 1), (u'Form', u'macro_condition_number_range_in'), (u'more_field_name', u'field1'), (u'less_field_name', u'field1'), (u'and_or', u'or'), (u'_macro_id_', u'macro_condition_number_range_in_2'), (u'less_field_value', 10)]), OrderedDict([(u'_macro_id_', u'macro_field_validate_invalid_2'), (u'Form', u'macro_field_validate_invalid'), (u'invalid_message', u'Not in range')])]]

# Ensure the imported order is correct and the same as before

    >>> db.objectIds()
    ['plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'frm_test', 'frm1', u'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']
    >>> s = db.exportDesignAsJSON()

    >>> print s
    {
    ...
            "frm_test": {
    ...
            "frm1": {
    ...
            "frm2": {
    ...
            "frm3": {
    ...
            "view1": {
    ...
            "view2": {
    ...
    }


    >>> id = portal.invokeFactory('PlominoDatabase', id='test')
    >>> newdb = portal.test
    >>> newdb.importDesignFromJSON(s)
    >>> newdb.objectIds()
    ['plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'frm_test', 'frm1', 'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']

Also check the order of view and form elements
    >>> newdb.frm1.objectIds() == db.frm1.objectIds()
    True
    >>> newdb.frm2.objectIds() == db.frm2.objectIds()
    True
    >>> newdb.view1.objectIds() == db.view1.objectIds()
    True


Export design to file system

    >>> import json, os
    >>> from os import listdir
    >>> from os.path import isfile, join
    >>> dir, _ = os.path.split(os.path.abspath(__file__))
    >>> dir = os.path.join(dir,'tmp_export')
    >>> output_dir = os.path.join(dir,'mydb')
    >>> db.exportDesign(targettype='folder', targetfolder=dir)
    >>> export_files = [f for f in listdir(output_dir) if isfile(join(output_dir, f))]
    >>> print sorted(export_files) # linux doesn't store order. osx does.
    ['frm1.field2.py', 'frm1.field3.py', 'frm1.html', 'frm1.json', 'frm2.guitarist.py', 'frm2.html', 'frm2.json', 'frm2.welcome.py', 'frm3.json', 'frm4.json', 'frm_test.html', 'frm_test.json', 'view1.col1.py', 'view1.json', 'view2.json', 'view2.py', 'view3.json', 'view3.py', 'view4.json', 'view4.py']

Import design from file system

    >>> id = portal.invokeFactory('PlominoDatabase', id='test_import_filesystem')
    >>> inputdir = os.path.join(dir,'mydb')
    >>> newdb = portal.test_import_filesystem
    >>> newdb.importDesignFromJSON(from_folder=inputdir, replace = True)
    >>> sorted(newdb.objectIds()) # linux doesn't store order. osx does.
    ['frm1', 'frm2', 'frm3', 'frm4', 'frm_test', 'plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'view1', 'view2', 'view3', 'view4']
    >>> newdb.frm1.objectIds() == db.frm1.objectIds()
    True
    >>> newdb.frm2.objectIds() == db.frm2.objectIds()
    True
    >>> newdb.view1.objectIds() == db.view1.objectIds()
    True

Export design as zip bundle

    >>> from zipfile import ZipFile, ZIP_DEFLATED
    >>> file_string = db.exportDesignAsZip()
    >>> export_zip_file = ZipFile(file_string)

Check if zip bunlde include JSON, HTML, PY files
    >>> namelist = [o.filename for o in export_zip_file.infolist()]

    >>> json_files = [fname for fname in namelist if fname.endswith('.json')]
    >>> print json_files
    ['mydb/frm_test.json', 'mydb/frm1.json', 'mydb/frm2.json', 'mydb/frm3.json', 'mydb/frm4.json', 'mydb/view1.json', 'mydb/view2.json', 'mydb/view3.json', 'mydb/view4.json', 'mydb/dbsettings.json']

Test contents is in the same order as the db
    >>> print [f for f in db.objectIds() if 'frm' in f or 'view' in f]
    ['frm_test', 'frm1', u'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']
    >>> print [f.split('/')[1].split('.')[0] for f in json_files if 'frm' in f or 'view' in f]
    ['frm_test', 'frm1', 'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']


    >>> html_files = [fname for fname in namelist if fname.endswith('.html')]
    >>> print html_files
    ['mydb/frm_test.html', 'mydb/frm1.html', 'mydb/frm2.html']

    >>> python_files = [fname for fname in namelist if fname.endswith('.py')]
    >>> print python_files
    ['mydb/frm1.field2.py', 'mydb/frm1.field3.py', 'mydb/frm2.guitarist.py', 'mydb/frm2.welcome.py', 'mydb/view1.col1.py', 'mydb/view2.py', 'mydb/view3.py', 'mydb/view4.py']

Check if JSON file does not contain HTML and formula

    >>> import json
    >>> json_string = export_zip_file.read('mydb/frm1.json')
    >>> frm1_json = json.loads(json_string)
    >>> 'form_layout' in  frm1_json['design']['frm1']['params']
    False
    >>> 'formula' in frm1_json['design']['frm1']['elements']['field2']['params']
    False

JSON string should not contains space at line end
    >>> lines = json_string.splitlines()
    >>> print [ line for line in lines if line.endswith(' ')]
    []

Check if HTML file contains the form layout

    >>> frm1_html = export_zip_file.read('mydb/frm1.html')
    >>> print frm1_html
    2 <p>please enter a value for field1:
    ...


Check if PY file contains the formula for the field

    >>> field2_py = export_zip_file.read('mydb/frm1.field2.py')
    >>> print field2_py
    ## START formula {
    ...


# Import design as zip bundle (new style)

    >>> old_contents = db.objectIds()
    >>> print old_contents
    ['plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'frm_test', 'frm1', u'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']

#    >>> import os, zipfile
#    >>> dir, _f = os.path.split(os.path.abspath(__file__))
#    >>> import_zip_file = ZipFile(os.path.join(dir, "filestoimport", "macros_bundle.zip"), "r")
    >>> db.importDesignFromZip(export_zip_file, replace=True)

#    >>> db.refreshDB()
#    [...]

    >>> print db.objectIds()
    ['plomino_documents', 'plomino_index', 'resources', 'scripts', 'temporary_files', 'frm_test', 'frm1', 'frm2', 'frm3', 'frm4', 'view1', 'view2', 'view3', 'view4']
    >>> db.objectIds() == old_contents
    True

    >>> frm1_html == db.frm1.form_layout
    True


Check if Formula is restored
    >>> db.frm1.field2.formula in field2_py
    True
    >>> import difflib
    >>> print ''.join(difflib.ndiff(db.frm1.field2.formula.splitlines(1), field2_py.splitlines(1)))
    + ## START formula {
      plominoDocument.setItem('field4', 'side-effect')
      return 'My favorite song is '+plominoDocument.field1
    + ## END formula }

Check that that if we export again, no extra lines etc are added.

    >>> export_zip_file2 = ZipFile(db.exportDesignAsZip())
    >>> frm1_html == export_zip_file2.read('mydb/frm1.html')
    True

    >>> print ''.join(difflib.ndiff(db.frm1.field2.formula.splitlines(1), export_zip_file2.read('mydb/frm1.field2.py').splitlines(1)))
    + ## START formula {
      plominoDocument.setItem('field4', 'side-effect')
      return 'My favorite song is '+plominoDocument.field1
    + ## END formula }

    >>> for fn in [fn for fn in export_zip_file.namelist() if export_zip_file2.read(fn) != export_zip_file.read(fn)]:
    ...    print ''.join(difflib.unified_diff(export_zip_file.read(fn).splitlines(1), export_zip_file2.read(fn).splitlines(1),fn,fn))



# Import design as zip bundle (old style)

    >>> import os
    >>> dir, _f = os.path.split(os.path.abspath(__file__))
    >>> import_zip_file = ZipFile(os.path.join(dir, "filestoimport", "macros_bundle_old_style.zip"), "r")
    >>> db.importDesignFromZip(import_zip_file)
    >>> db.refreshDB()
    [...]
    >>> macro_field_number_between_old_style = getattr(db, 'macro_field_number_between', None)

# Verify compatibility by import  old-style bundle

    >>> print macro_field_number_between_old_style.form_layout
    <p><span class="plominoLabelClass">min</span></p>
    ...

    >>> print macro_field_number_between_old_style.document_title
    doc = plominoContext
    ...

Check that we can import and export database into other Databases
    >>> import json, os, filecmp
    >>> from os import listdir
    >>> from os.path import isfile, join

    # Output the current database to a folder
    >>> dir, _ = os.path.split(os.path.abspath(__file__))
    >>> dir = os.path.join(dir,'tmp_export')
    >>> output_dir = os.path.join(dir,'mydb')
    >>> db.exportDesign(targettype='folder', targetfolder=dir)

    # Create a new database and import the exported database from the previous steps
    >>> new_db_id = portal.invokeFactory('PlominoDatabase', id='test_import_export_between_databases')
    >>> inputdir = os.path.join(dir,'mydb')
    >>> newdb = portal.get(new_db_id)
    >>> newdb.importDesignFromJSON(from_folder=inputdir, replace = True)

    # Export the database from the new database
    >>> newdb_output_dir = os.path.join(dir, 'newdb')
    >>> db.exportDesign(targettype='folder', targetfolder=newdb_output_dir)

    # Compare the two database exports
    >>> directory_comparison = filecmp.dircmp(output_dir, os.path.join(newdb_output_dir, 'mydb'))
    >>> directory_comparison.diff_files
    []

    >>> directory_comparison.same_files
    [...]
