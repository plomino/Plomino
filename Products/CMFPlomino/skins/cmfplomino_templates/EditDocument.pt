<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">
<body>

<tal:comment condition="nothing"> If we have a form, conditionally include:
- calendar JS
- Google JS
</tal:comment>
<metal:javascript_head_slot fill-slot="javascript_head_slot"
    tal:define="
        has_form python:here.hasItem('Form');
        form python:here.getForm();
        form_method python:form.getFormMethod();
        hasDateTimeField python:form.hasDateTimeField();
        hasDynamicContent python:form.hasDynamicContent();
        hasGoogleVisualizationField python:form.hasGoogleVisualizationField()
        ">
    <tal:has_form condition="has_form">
        <tal:has_date condition="hasDateTimeField">
            <script type="text/javascript"
                    charset="iso-8859-1"
                    tal:attributes="src string:$portal_url/jscalendar/calendar_stripped.js">
            </script>
            <script type="text/javascript"
                    charset="iso-8859-1"
                    tal:attributes="src string:$portal_url/jscalendar/calendar-en.js">
          </script>
        </tal:has_date>
        <tal:has_googleviz condition="hasGoogleVisualizationField">
            <tal:script metal:use-macro="here/googlevisualization_macro/macros/js_library">//load google js</tal:script>
        </tal:has_googleviz>
        <script type="text/javascript" tal:condition="hasDynamicContent" tal:content="string:
function refreshDynamicContent() {
    var onsuccess = function(data, textStatus, xhr) {
        for (var hw in data.hidewhen)
            jQuery('.hidewhen-' + hw).css('display', data.hidewhen[hw]?'none':'block');
        for (var df in data.dynamicfields)
            jQuery('.dynamic-' + df).text(data.dynamicfields[df]);
    }
    jQuery.ajax({
        type: '${form_method}',
        url: 'computedynamiccontent',
        data: jQuery('#plomino_form').serialize(),
        success: onsuccess,
        dataType: 'json' 
    });
}
jQuery(document).ready( function() {
    jQuery('#plomino_form :input').change(refreshDynamicContent);
});
">
        </script>
        <tal:block_hasjsresources 
            tal:define="jsresources python:form.get_resources_js()"
            tal:condition="jsresources"
            tal:repeat="js jsresources">
            <script
                type="text/javascript"
                charset="iso-8859-1"
                tal:attributes="src js">
            </script>
        </tal:block_hasjsresources>
    </tal:has_form>
</metal:javascript_head_slot>

<tal:comment condition="nothing"> Include calendar CSS if we have datetime fields.
</tal:comment>
<metal:css_style_slot fill-slot="style_slot"
    tal:define="
        has_form python:here.hasItem('Form');
        form python:here.getForm();
        hasDateTimeField python:form.hasDateTimeField();
        hasDynamicHidewhen python:form.hasDynamicHidewhen();
        hasGoogleVisualizationField python:form.hasGoogleVisualizationField()
        ">
    <tal:has_form condition="has_form">
        <tal:has_date condition="hasDateTimeField">
            <link rel="stylesheet" type="text/css" media="all" tal:attributes="href string:$portal_url/jscalendar/calendar-system.css" />
        </tal:has_date>
        <tal:block_hascssresources
            tal:define="cssresources python:form.get_resources_css()"
            tal:condition="cssresources"
            tal:repeat="css cssresources">
            <link rel="stylesheet"
                type="text/css"
                media="all"
                tal:attributes="href css" />
        </tal:block_hascssresources>
    </tal:has_form>
</metal:css_style_slot>

<tal:comment condition="nothing"> Disable border if no Plomino design permission.
</tal:comment>
<metal:top_slot fill-slot="top_slot"
                tal:define="is_designer python:here.hasDesignPermission()" >
    <tal:not_designer condition="not:is_designer">
        <tal:hide define="dummy python:request.set('disable_border', 1);" />
    </tal:not_designer>
</metal:top_slot>

<metal:main fill-slot="main">
    <tal:TODO condition="nothing"> Do we need to redefine 'form' here? </tal:TODO>
    <tal:main-macro 
        metal:define-macro="main"
        define="kssClassesView context/@@kss_field_decorator_view;
                getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;
                templateId template/getId;
                has_form python:here.hasItem('Form');
                form python:here.getForm()
                ">
    <tal:has_form condition="has_form">
        <form 
            tal:define="
                    form_method python:form.getFormMethod();
                    enctype python:(form_method == 'POST') and 'multipart/form-data'
                    "
            tal:attributes="
                    name form/id;
                    action python:here.doc_url()+'/saveDocument';
                    method form_method;
                    enctype enctype|nothing
                    "
            id="plomino_form">
            <tal:validation metal:use-macro="here/validation_messages/macros/messages">display form actions</tal:validation>
            <tal:form define="b form/ActionBarPosition|nothing">
                <div tal:replace="structure provider:plone.abovecontenttitle" />
                <tal:form_actions_top
                    define="owner python:form"
                    condition= "python:b and form.ActionBarPosition in ['TOP', 'BOTH']">
                    <span metal:use-macro="here/ActionBar/macros/EditDocumentActionBar" >
                        display form actions above form fields
                    </span><br/>
                </tal:form_actions_top>

                <h1 class="documentFirstHeading" tal:content="here/Title">Title</h1>
                <div tal:replace="structure provider:plone.belowcontenttitle" />
                <div tal:replace="structure provider:plone.abovecontentbody" />
                <span tal:content="structure python:here.editWithForm(form)" />

                <tal:form_actions_bottom
                    define="owner python:form"
                    condition="python:b and form.ActionBarPosition in ['BOTTOM', 'BOTH']">
                    <span metal:use-macro="here/ActionBar/macros/EditDocumentActionBar" >
                        display form actions below form fields
                    </span>
                </tal:form_actions_bottom>

                <div tal:replace="structure provider:plone.belowcontentbody" />
            </tal:form>
        </form>
    </tal:has_form>

    <tal:no_form condition="not:has_form">
        <h3>No form defined to display this document.</h3>
        <br/>A Plomino document always needs a Plomino form in order to be displayed or edited.
    </tal:no_form>

    </tal:main-macro>
</metal:main>

</body>
</html>
