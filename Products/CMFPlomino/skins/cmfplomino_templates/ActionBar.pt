<div class="formControls" metal:define-macro="ReadDocumentActionBar">
<span class="actionButtons">
	<tal:defaultactions tal:condition="python:not(owner.getHideDefaultActions())">
		<tal:block
			tal:condition="python:test(here.hasEditPermission(here)==True and here.hasEditPermission(here.getParentDatabase())==True and here.isAuthor())">
		<input type="button" class="context plominoEdit" value="Edit" name="plomino_edit"
			i18n:domain="CMFPlomino" i18n:attributes="value"
			tal:define="disable_border python:test(here.hasDesignPermission(here), '', '?disable_border=1')"
			tal:attributes="onclick python:'location.href=\''+here.navigationParent(here)+'/'+here.id+'/EditDocument'+disable_border+'\''" />
		</tal:block>

		<tal:block
			tal:condition="python:test(here.hasRemovePermission(here)==True and here.hasRemovePermission(here.getParentDatabase())==True and here.isAuthor())">
		<tal:block metal:use-macro="here/ActionBar/macros/DeleteAction">display
		delete action</tal:block></tal:block>


		<tal:block metal:use-macro="here/ActionBar/macros/CloseAction">display
		close action</tal:block>
		
	</tal:defaultactions>
	
	<tal:block
		tal:repeat="a python:[act for act in owner.getActions(here) if act.getInActionBar()==True]">
		<tal:block
			tal:define="plominoaction python:a; plominotarget python:here">
			<tal:block metal:use-macro="here/ActionBar/macros/ButtonAction">
			display action as a link </tal:block>
		</tal:block>
	</tal:block>
</span>
</div>

<div class="formControls" metal:define-macro="EditDocumentActionBar">
<span class="actionButtons">
	<tal:defaultactions tal:condition="python:not(owner.getHideDefaultActions())">
		<tal:block metal:use-macro="here/ActionBar/macros/CloseAction">display
		close action</tal:block>
		<input type="submit" class="context plominoSave" name="plomino_save"
			value="Save" i18n:domain="CMFPlomino" i18n:attributes="value" />
		<tal:block
			tal:condition="python:not(here.getCurrentUser().getUserName()=='Anonymous User')"><tal:block
			metal:use-macro="here/ActionBar/macros/DeleteAction">display
		delete action</tal:block></tal:block>
	</tal:defaultactions>
		<tal:block
			tal:repeat="a python:[act for act in owner.getActions(here) if act.getInActionBar()==True]">
			<tal:block
				tal:define="plominoaction python:a; plominotarget python:here">
				<tal:block metal:use-macro="here/ActionBar/macros/ButtonAction">
				display action as a link </tal:block>
			</tal:block>
		</tal:block>
</span>
</div>

<div class="formControls" metal:define-macro="OpenFormActionBar">
<span class="actionButtons">
	<tal:defaultactions tal:condition="python:not(owner.getHideDefaultActions())">
		<tal:block metal:use-macro="here/ActionBar/macros/CloseAction">display
		close action</tal:block>
		<input type="submit" class="context plominoSave" name="plomino_save"
			value="Save" i18n:domain="CMFPlomino" i18n:attributes="value" />
	</tal:defaultactions>
		<tal:block
			tal:repeat="a python:[act for act in owner.getActions(here) if act.getInActionBar()==True]">
			<tal:block
				tal:define="plominoaction python:a; plominotarget python:here">
				<tal:block metal:use-macro="here/ActionBar/macros/ButtonAction">
				display action as a link </tal:block>
			</tal:block>
		</tal:block>
</span>
</div>

<div class="formControls" metal:define-macro="SearchFormActionBar">
<span class="actionButtons">
    <tal:defaultactions tal:condition="python:not(owner.getHideDefaultActions())">
		<tal:block metal:use-macro="here/ActionBar/macros/CloseAction">display
		close action</tal:block>
		<input type="submit" class="context plominoSearch" value="Search" name="plomino_search"
			i18n:domain="CMFPlomino" i18n:attributes="value" />
	</tal:defaultactions>
		<tal:block
			tal:repeat="a python:[act for act in owner.getActions(here) if act.getInActionBar()==True]">
			<tal:block
				tal:define="plominoaction python:a; plominotarget python:here">
				<tal:block metal:use-macro="here/ActionBar/macros/ButtonAction">
				display action as a link </tal:block>
			</tal:block>
		</tal:block>
</span>
</div>

<div class="formControls" metal:define-macro="ViewActionBar">
<span class="actionButtons">
<script>
function selecteddocuments()
{
if (typeof(oDynamicTable)!="undefined") {
	return dynamicview_selecteddocuments();
} else {
	var c_value = "";
	if(document.plominoviewform.sdoc.length==undefined) {
		c_value=document.plominoviewform.sdoc.value;
	} else {
		for (var i=0; i < document.plominoviewform.sdoc.length; i++)
		   {
		   if (document.plominoviewform.sdoc[i].checked)
		      {
		      c_value = c_value + document.plominoviewform.sdoc[i].value + "@";
		      }
		   }
	}
	return c_value;
}
}

</script>
	<tal:defaultactions tal:define="hidedefault owner/HideDefaultActions|nothing" tal:condition="python:not(hidedefault)">
		<tal:block metal:use-macro="here/ActionBar/macros/CloseAction">display
		close action</tal:block>
		<input type="button" class="context plominoDelete" value="Delete" name="plomino_deletedocuments"
			i18n:domain="CMFPlomino" i18n:attributes="value"
			tal:condition="python:here.hasRemovePermission(here)==True"
			tal:define="msg python:here.plone_utils.translation_service.translate(msgid='Do you really want to delete those documents', domain='CMFPlomino');"
			tal:attributes="onclick string:if(confirm('${msg} ?')){location.href='./manage_deleteDocuments?deldocs='+selecteddocuments()}" />
	</tal:defaultactions>
		<tal:block
			tal:repeat="a python:[act for act in owner.getActions(here) if act.getInActionBar()==True]">
			<tal:block
				tal:define="plominoaction python:a; plominotarget python:here">
				<tal:block metal:use-macro="here/ActionBar/macros/ButtonAction">
				display action as a link </tal:block>
			</tal:block>
		</tal:block>
</span>
</div>

<tal:block metal:define-macro="LinkAction"> <a
	tal:attributes="href python:plominoaction.executeAction(plominotarget)"
	tal:content="python: plominoaction.Title()" /></tal:block>

<tal:block metal:define-macro="SubmitAction"> <input type="submit"
	class="context" tal:attributes="value python: plominoaction.Title(); name python:plominoaction.id; id python:plominoaction.id;" />
</tal:block>

<tal:block metal:define-macro="ButtonAction"> 
  <tal:submit tal:condition="python:plominoaction.ActionType=='SAVE'">
  <input type="submit"
	class="context" tal:attributes="value python: plominoaction.Title(); name python:plominoaction.id" />
  </tal:submit>
  <tal:button tal:condition="python:not(plominoaction.ActionType=='SAVE')">
  <input class="context"
  
	type="button"
	tal:attributes="onclick python:'location.href=\''+plominoaction.executeAction(plominotarget)+'\'';
								value python: plominoaction.Title(); name python:plominoaction.id; id python:plominoaction.id;"/>
  </tal:button>
</tal:block>

<tal:block metal:define-macro="CloseAction"> <tal:block
	tal:define="is_parent_form_or_view python:(hasattr(here.aq_parent,'getIsSearchForm') or hasattr(here.aq_parent,'getSelectionFormula'));">
	<tal:backtoDB tal:condition="python:not(is_parent_form_or_view)">
		<input type="button" class="context plominoClose" value="Close" name="plomino_close"
			i18n:domain="CMFPlomino" i18n:attributes="value"
			tal:attributes="onclick python:'location.href=\''+here.navigationParent(here)+'\''" />
	</tal:backtoDB>
	<tal:backtoprevious tal:condition="python:is_parent_form_or_view">
		<input type="button" class="context plominoClose" value="Close" name="plomino_close"
			i18n:domain="CMFPlomino" i18n:attributes="value"
			onclick="history.go(-1)" />
	</tal:backtoprevious>

</tal:block> </tal:block>
<tal:block metal:define-macro="DeleteAction"><tal:block tal:condition="python:here.hasCurrentUserRight(here.getSpecificRights('specific_deletedocument'))"><input type="button"
	class="context plominoDelete" value="Delete" i18n:domain="CMFPlomino" name="plomino_delete"
	i18n:attributes="value"
	tal:define="msg python:here.plone_utils.translation_service.translate(msgid='Do you really want to delete this document', domain='CMFPlomino');"
	tal:attributes="onclick python:'if(confirm(\''+msg+' ?\')){location.href=\''+here.absolute_url()+'/delete?returnurl='+here.getParentDatabase().absolute_url()+'\'}'" />
	</tal:block>
</tal:block>
